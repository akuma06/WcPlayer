import { AbstractPlayer } from './PlayerInterface';
import { HTML5AudioPlayer, HTML5VideoPlayer } from './Html5';
export default class WcPlayer extends HTMLElement {
    constructor(type = '', source = '') {
        super();
        this.attachShadow({ mode: 'open' });
        this.shadowRoot.innerHTML = this.build();
        const slot = this.shadowRoot.querySelector('#platform');
        slot.classList.add('hide');
        if (type !== undefined && type !== '') {
            this.type = type;
        }
        if (source !== undefined && source !== '') {
            this.source = source;
        }
        else if (this.slotChildElement !== undefined) {
            const platform = Array.from(WcPlayer.platforms.values()).find((plt) => plt.matchElement(this.slotChildElement));
            if (platform !== undefined) {
                this.platform = platform.platform;
            }
        }
    }
    static use(pltClass) {
        if (pltClass.prototype instanceof AbstractPlayer) {
            if (!this.platforms.has(pltClass.platform))
                this.platforms.set(pltClass.platform, pltClass);
        }
    }
    build() {
        return `
    <style>
      .wcplayer {
        width: 100%;
        height: 100%;
        background: black;
      }
      .hide {
        display: none;
      }
    </style>
    <div class="wcplayer">
      <div class="player">
        <slot id="platform"></slot>
      </div>
      <wc-controls></wc-controls>
    </div>`;
    }
    static get observedAttributes() {
        return ['source', 'type'];
    }
    get platform() {
        return this._platform.platform;
    }
    set platform(platform) {
        this._platform = WcPlayer.platforms.get(platform);
        if (this.currentPlayer !== undefined)
            this.shadowRoot.querySelector('.player').removeChild(this.currentPlayer);
        this.currentPlayer = new this._platform(this);
        this.shadowRoot.querySelector('.player').appendChild(this.currentPlayer);
    }
    get source() {
        return this.hasAttribute('source') ? this.getAttribute('source') : '';
    }
    set source(src) {
        if (src !== this.source) {
            this.setAttribute('source', src);
            this.currentPlayer.source = src;
        }
    }
    get type() {
        const type = this.hasAttribute('type') ? this.getAttribute('type') : '';
        return type;
    }
    set type(type) {
        if (type !== this.type && WcPlayer.platforms.has(type)) {
            this.setAttribute('type', type);
            this.platform = type;
        }
    }
    get slotChildElement() {
        return this.shadowRoot.querySelector('#platform').firstElementChild;
    }
}
WcPlayer.use(HTML5AudioPlayer);
WcPlayer.use(HTML5VideoPlayer);
customElements.define('wcplayer', WcPlayer);
//# sourceMappingURL=player.js.map