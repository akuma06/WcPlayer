var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AbstractPlayer } from './PlayerInterface';
var HTML5PlayerType;
(function (HTML5PlayerType) {
    HTML5PlayerType[HTML5PlayerType["AUDIO"] = 0] = "AUDIO";
    HTML5PlayerType[HTML5PlayerType["VIDEO"] = 1] = "VIDEO";
})(HTML5PlayerType || (HTML5PlayerType = {}));
let HTML5Player = /** @class */ (() => {
    class HTML5Player extends AbstractPlayer {
        constructor(parent) {
            super(parent);
            this.attachShadow({ mode: 'open' });
            const htmlElement = this.parent.slotChildElement;
            this.source = htmlElement.currentSrc || htmlElement.src || '';
            this.reloadPlayer();
        }
        attributeChangedCallback(name) {
            if (name === 'quality') {
                this.getAvailableQualities().then((qualities) => {
                    if (qualities.length > 0 && qualities[this.quality] !== undefined) {
                        this.source = this.sources[this.quality].getAttribute('src');
                    }
                });
            }
            if (name === 'source') {
                const currentTime = this.player.currentTime;
                const isPaused = this.player.paused;
                this.player.setAttribute('src', this.source);
                this.player.currentTime = currentTime;
                if (!isPaused) {
                    this.player.play();
                }
            }
        }
        reloadPlayer() {
            if (this.player !== undefined)
                this.shadowRoot.removeChild(this.player);
            this.player = document.createElement(this.constructor.playerTyoe === HTML5PlayerType.AUDIO ? 'audio' : 'video');
            this.player.setAttribute('src', this.source);
            this.player.currentTime = 0;
            this.player.autoplay = this.autoplay;
            this.setListeners();
            this.shadowRoot.appendChild(this.player);
        }
        setListeners() {
            this.player.addEventListener('playing', () => {
                this.emit('playing', { player: this });
            });
            this.player.addEventListener('pause', () => {
                this.emit('pause', { player: this });
            });
            this.player.addEventListener('waiting', () => {
                this.emit('waiting', { player: this });
            });
            this.player.addEventListener('durationchange', () => {
                this.emit('durationchange', { player: this });
            });
            this.player.addEventListener('timeupdate', () => {
                this.emit('timeupdate', { player: this });
            });
            this.player.addEventListener('ended', () => {
                this.emit('ended', { player: this });
            });
        }
        play() {
            return __awaiter(this, void 0, void 0, function* () {
                this.player.play();
            });
        }
        pause() {
            return __awaiter(this, void 0, void 0, function* () {
                this.player.pause();
            });
        }
        seek(t) {
            return __awaiter(this, void 0, void 0, function* () {
                this.player.currentTime = t;
            });
        }
        stop() {
            return __awaiter(this, void 0, void 0, function* () {
                this.player.pause();
                this.player.currentTime = 0;
            });
        }
        getAvailableQualities() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.sources.map((source) => parseInt(source.getAttribute('size')));
            });
        }
        get sources() {
            return Array.from(this.parent.slotChildElement.querySelectorAll('source')).filter((source) => {
                if (source.hasAttribute('type')) {
                    const [type, mime] = source.getAttribute('type').split('/');
                    if (type === this.getAttribute('type')) {
                        if (this.player.canPlayType(type + '/' + mime) === '') {
                            return true;
                        }
                    }
                }
                return false;
            });
        }
    }
    HTML5Player.platform = 'html5';
    return HTML5Player;
})();
let HTML5AudioPlayer = /** @class */ (() => {
    class HTML5AudioPlayer extends HTML5Player {
    }
    HTML5AudioPlayer.platform = 'html5-audio';
    HTML5AudioPlayer.playerTyoe = HTML5PlayerType.AUDIO;
    return HTML5AudioPlayer;
})();
export { HTML5AudioPlayer };
let HTML5VideoPlayer = /** @class */ (() => {
    class HTML5VideoPlayer extends HTML5Player {
    }
    HTML5VideoPlayer.platform = 'html5-video';
    HTML5VideoPlayer.playerTyoe = HTML5PlayerType.AUDIO;
    return HTML5VideoPlayer;
})();
export { HTML5VideoPlayer };
customElements.define('html5-audio-player', HTML5AudioPlayer);
customElements.define('html5-video-player', HTML5VideoPlayer);
//# sourceMappingURL=Html5.js.map